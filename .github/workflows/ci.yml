name: CI

on:
  push:
    branches: ['**']
    tags: ['v*']
  pull_request:

env:
  HF_HUB_DISABLE_PROGRESS_BARS: "1"
  PYTHONUTF8: "1"

jobs:
  cpu:
    runs-on: windows-latest
    env:
      TRADEGOV_API_KEY: ${{ secrets.TRADEGOV_API_KEY }}
      FEDREG_API_KEY: ${{ secrets.FEDREG_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Guard versions
        shell: pwsh
        run: python scripts/check_versions.py
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-win.txt
          pip install black flake8 "coverage[toml]"
      - name: Lint
        run: black --check . && flake8 .
      - name: Tests
        run: pytest -q --disable-warnings --maxfail=1

      - name: Build TTL bundle
        run: python -m earCrawler.pipelines.build_ttl
      - name: SHACL gate on bundle
        run: python -m earCrawler.validation.validate_shapes
      - name: Conditional Fuseki load (skipped in CI)
        run: echo "Skipping network load in CI"

      - name: Smoke test emit and validate
        shell: pwsh
        run: |
          python -m cli.kg_emit --sources ear --sources nsf --in tests\kg\fixtures --out tests\kg\artifacts
          python -m cli.kg_validate --glob "tests\kg\artifacts\*.ttl"
          python - <<'PY'
          import glob
          from rdflib import Graph
          for p in glob.glob(r"tests\kg\artifacts\*.ttl"):
              Graph().parse(p, format="turtle")
          PY

  gpu:
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      TRADEGOV_API_KEY: ${{ secrets.TRADEGOV_API_KEY }}
      FEDREG_API_KEY: ${{ secrets.FEDREG_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-gpu.txt
      - name: Cache Hugging Face models
        uses: actions/cache@v3
        with:
          path: ~/.cache/huggingface
          key: ${{ runner.os }}-hf-${{ hashFiles('requirements-gpu.txt') }}
      - name: Tests
        run: pytest -m gpu

  benchmark:
    runs-on: windows-gpu-t4
    needs: gpu
    env:
      TRADEGOV_API_KEY: ${{ secrets.TRADEGOV_API_KEY }}
      FEDREG_API_KEY: ${{ secrets.FEDREG_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-gpu.txt
      - name: Run benchmark
        run: bash eval/collect_benchmark.sh
      - name: Upload benchmark
        uses: actions/upload-artifact@v4
        with:
          name: benchmark
          path: benchmark.md

  validate-container:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Apptainer
        run: sudo apt-get update && sudo apt-get install -y apptainer
      - name: Lint container def
        run: apptainer inspect container/earcrawler.def

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: cpu
    runs-on: windows-latest
    env:
      TRADEGOV_API_KEY: ${{ secrets.TRADEGOV_API_KEY }}
      FEDREG_API_KEY: ${{ secrets.FEDREG_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build API image
        run: docker build -f docker/api.Dockerfile -t ghcr.io/${{ github.repository }}/api:${{ github.ref_name }} .
      - name: Push API image
        run: docker push ghcr.io/${{ github.repository }}/api:${{ github.ref_name }}
      - name: Build RAG image
        run: docker build -f docker/rag.Dockerfile -t ghcr.io/${{ github.repository }}/rag:${{ github.ref_name }} .
      - name: Push RAG image
        run: docker push ghcr.io/${{ github.repository }}/rag:${{ github.ref_name }}
      - name: Build agent image
        run: docker build -f docker/mistral.Dockerfile -t ghcr.io/${{ github.repository }}/agent:${{ github.ref_name }} .
      - name: Push agent image
        run: docker push ghcr.io/${{ github.repository }}/agent:${{ github.ref_name }}
      - name: Run monitor against staging
        shell: pwsh
        run: ./monitor.ps1 -Services @('https://staging/api/health','https://staging/kg/health','https://staging/agent/health')
